apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: nginx-ingress-controller
  namespace: kube-system
  labels:
    k8s-app: nginx-ingress-controller
    # app.kubernetes.io/name: ingress-nginx
    # app.kubernetes.io/part-of: ingress-nginx
spec:
  replicas: 1
  # selector:
    # matchLabels:
      # app.kubernetes.io/name: ingress-nginx
      # app.kubernetes.io/part-of: ingress-nginx
  template:
    metadata:
      labels:
        k8s-app: nginx-ingress-controller
        # app.kubernetes.io/name: ingress-nginx
        # app.kubernetes.io/part-of: ingress-nginx
      annotations:
        prometheus.io/port: "10254"
        prometheus.io/scrape: "true"
    spec:
      # hostNetwork makes it possible to use ipv6 and to preserve the source IP correctly 
      # regardless of docker configuration
      # however, it is not a hard dependency of the nginx-ingress-controller itself 
      # and it may cause issues if port 10254 already is taken on the host
      # that said, since hostPort is broken on CNI 
      # (https://github.com/kubernetes/kubernetes/issues/31307) 
      # we have to use hostNetwork where CNI is used like with kubeadm
      # 注释表示不使用宿主机的80口，
      # hostNetwork: true 
      # 表示容器使用和宿主机一样的网络
      hostNetwork: true  
      terminationGracePeriodSeconds: 60
      # 引用前面创建的serviceacount
      serviceAccountName: nginx-ingress-serviceaccount 
      containers:   
        #容器名
      - name: nginx-ingress-controller  
        #容器使用的镜像
        image: gcr.io/google_containers/nginx-ingress-controller:0.9.0-beta.1      
        # image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.23.0
        args:
          - /nginx-ingress-controller
          - --default-backend-service=$(POD_NAMESPACE)/default-http-backend
          #这是启用Https时用的
          # - --default-ssl-certificate=$(POD_NAMESPACE)/ingress-secret  
          # - --configmap=$(POD_NAMESPACE)/nginx-configuration
          # - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
          # - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
          # - --publish-service=$(POD_NAMESPACE)/ingress-nginx
          # - --annotations-prefix=nginx.ingress.kubernetes.io
        # securityContext:
            # allowPrivilegeEscalation: true
            # capabilities:
              # drop:
                # - ALL
              # add:
                # - NET_BIND_SERVICE
            # www-data -> 33
            # runAsUser: 33
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
        ports:
          #80映射到80
          - containerPort: 80  
            hostPort: 80    
          - containerPort: 443
            hostPort: 443
          # - name: http
            # containerPort: 80
          # - name: https
            # containerPort: 443
        #启动这个服务时要验证/healthz 端口10254会在运行的node上监听。 
        readinessProbe:   
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          #每隔10做健康检查 
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 10
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          initialDelaySeconds: 10  
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 10
      # 指明运行在哪，此IP要和default backend是同一个IP 
      # nodeSelector:  
        #上面映射到了hostport80，确保此IP80，443没有占用.
        # kubernetes.io/hostname: 10.3.1.17   